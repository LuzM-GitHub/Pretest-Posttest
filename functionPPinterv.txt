# function for pretest-posttest data considering two interventions

pp.interv <- function(baseC,baseT,var.error,N)
{
pretest1   = as.matrix(baseC[,1])
posttest1 = as.matrix(baseC[,2])
pretest2   = as.matrix(baseT[,1])
posttest2 = as.matrix(baseT[,2])

n0=nrow(pretest1)==nrow(pretest2) & nrow(pretest1)==nrow(posttest1) & nrow(pretest1)==nrow(posttest2)
if(n0==TRUE) n0=nrow(pretest1) else stop("The number of observations would be equal \n from the pretest and the posttest for the two interventions!")

mean.pre <- mean(rbind(pretest1,pretest2))
var.pre <- var(rbind(pretest1,pretest2))
var.pos1 <- var(posttest1)
covaprepos1 <-cov(pretest1,posttest1)
var.pos2 <- var(posttest2)
covaprepos2 <-cov(pretest2,posttest2)
covapos12 <- 0   #!!! It is assumed zero because we do not known it.
sigma_pp.est= matrix(c(var.pre,covaprepos1,covaprepos2,
                   covaprepos1,var.pos1,covapos12,covaprepos2,covapos12,var.pos2),3,3)
sigma_a.est   = sigma_pp.est[1:2,1:2]%x%matrix(c(1,0,0,0),2,2)+sigma_pp.est[c(1,3),c(1,3)]%x%matrix(c(0,0,0,1),2,2)


###########  linear combination  ###########

g  = rbind(   matrix(   0,nrow=N,ncol=1),	 #coefficients c_{i1}^C+c_{i1}^T
	   matrix( 1/N,nrow=N,ncol=1),	 #coefficients c_{i2}^C         
	   matrix(-1/N,nrow=N,ncol=1)	 #coefficients c_{i2}^T 
                )
gI = rbind(matrix(c(1,0,0),1,3)%x%cbind(diag(1,(2*n0)),matrix(0,(2*n0),(N-2*n0))),
       	matrix(c(0,1,0),1,3)%x%cbind(diag(1,n0),matrix(0,n0,(N-n0))),
       	matrix(c(0,0,1),1,3)%x%cbind(matrix(0,n0,n0),diag(1,n0),matrix(0,n0,(N-2*n0))))%*%g
gII= rbind(diag(1,3)%x%cbind(matrix(0,(N-2*n0),(2*n0)),diag(1,(N-2*n0))),
           	matrix(c(0,1,0),1,3)%x%cbind(matrix(0,n0,n0),diag(1,n0),matrix(0,n0,(N-2*n0))),
	matrix(c(0,0,1),1,3)%x%cbind(diag(1,n0),matrix(0,n0,(N-n0))))%*%g

 ##############  parte1 of predictor  ##################
 H0 = rbind(c(1,0,0),diag(1,3))
 H1 = rbind(diag(1,3)%x%matrix(1,(N-2*n0),1),matrix(c(0,0,1,0,0,1),2,3)%x%matrix(1,n0,1))
 H2 = cbind(matrix(0,(4*n0),(3*(N-2*n0))),matrix(c(0,0,1,0,0,0,0,1),4,2)%x%diag(1,n0))
 sigma_b.est = H0%*%sigma_pp.est%*%t(H0)
 H3 = ((solve(sigma_a.est)%*%sigma_b.est-diag(1,4))%x%diag(1,n0))%*%H2
 Amatrix = diag(1,4*n0)+(as.numeric(var.error)*solve(sigma_a.est))%x%diag(1,n0)
 Gmatrix = (diag(1,4)%x%matrix(1,1,n0))%*%solve(Amatrix)%*%(diag(1,4)%x%matrix(1,n0,1))
 H4 = t(H0)%*%solve(sigma_a.est)%*%Gmatrix%*%H0
 Dmatrix = t(H0)%*%(diag(1,4)%x%matrix(1,1,n0))%*%((diag(1,4*n0)-solve(Amatrix))%*%gI-
           solve(Amatrix)%*%H3%*%gII)+t(H1)%*%gII
 parte1 = c()
 parte1$coef= (t(Dmatrix)%*%solve(t(H4))%*%t(H0)%*%solve(sigma_a.est)%*%(diag(1,4)%x%matrix(1,1,n0))+
              t(gI)+t(gII)%*%t(H3))%*%solve(Amatrix)
 estimative = parte1$coef%*%rbind(pretest1,pretest2,posttest1,posttest2)
#########
############## estimated variance because matrix.cov is estimated from the sample
salida <- NULL
####################     ancova
grupo = rbind(t(t(rep(1,n0))),t(t(rep(-1,n0))))
pre = rbind(pretest1,pretest2)
pre = pre-mean(pre)
pos = rbind(posttest1,posttest2)
dados = data.frame(grupo,pre,pos)
fit = lm(dados$pos ~ dados$grupo+dados$pre)
tau = fit$coefficients[2]
e.cov=2*tau
salida=cbind(estimative,e.cov)
colnames(salida)=cbind("Estimative proposal","Ancova estimative")
return(salida)
}
